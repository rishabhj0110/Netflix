{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\risha\\\\Desktop\\\\ITLAB\\\\netflix\\\\src\\\\components\\\\SearchResults.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport requests from \"../utils/requests\";\nimport Movie from \"./Movie\";\nimport Series from \"./Series\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./SearchResults.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchResults({\n  query,\n  type\n}) {\n  _s();\n\n  const {\n    api,\n    urls,\n    localAPI\n  } = requests;\n  const [page, setPage] = useState(1);\n  const [movies, setMovies] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [searchEnd, setSearchEnd] = useState(false);\n  const fetchUrl = `/search?query=${query}&type=${type}`;\n  useEffect(() => {\n    async function getSearchResults(url, initialResults) {\n      const response = await localAPI.get(url);\n      setMovies([...initialResults, ...response.data.results]);\n      setLoaded(true);\n      return response;\n    }\n\n    getSearchResults(fetchUrl, []);\n  }, [fetchUrl]);\n\n  const fetchData = () => {\n    let url = fetchUrl + `&page=${page + 1}`;\n    setPage(page + 1);\n\n    async function getSearchResults(url, initialResults) {\n      const response = await localAPI.get(url);\n\n      if (response.data.results.length == 0) {\n        setSearchEnd(true);\n      }\n\n      setMovies([...initialResults, ...response.data.results]);\n      setLoaded(true);\n      return response;\n    }\n\n    getSearchResults(url, movies);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search_results\",\n    id: \"search_results\",\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: movies.length,\n      next: fetchData,\n      hasMore: !searchEnd,\n      loader: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this),\n      children: movies.map(movie => (movie.media_type == \"movie\" || movie.media_type == \"tv\") && movie.poster_path != null && (movie.media_type == \"movie\" ? /*#__PURE__*/_jsxDEV(Movie, {\n        data: movie,\n        id: movie.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 8\n      }, this) : /*#__PURE__*/_jsxDEV(Series, {\n        data: movie,\n        id: movie.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 8\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n}\n\n_s(SearchResults, \"F7j5LrNqaOXKgAwu6ebhhflW2T8=\");\n\n_c = SearchResults;\nexport default SearchResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"sources":["C:/Users/risha/Desktop/ITLAB/netflix/src/components/SearchResults.jsx"],"names":["React","useEffect","useState","requests","Movie","Series","InfiniteScroll","SearchResults","query","type","api","urls","localAPI","page","setPage","movies","setMovies","loaded","setLoaded","searchEnd","setSearchEnd","fetchUrl","getSearchResults","url","initialResults","response","get","data","results","fetchData","length","map","movie","media_type","poster_path","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport requests from \"../utils/requests\";\r\nimport Movie from \"./Movie\";\r\nimport Series from \"./Series\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nimport \"./SearchResults.css\";\r\n\r\nfunction SearchResults({ query, type }) {\r\n\tconst { api, urls, localAPI } = requests;\r\n\tconst [page, setPage] = useState(1);\r\n\tconst [movies, setMovies] = useState([]);\r\n\tconst [loaded, setLoaded] = useState(false);\r\n\tconst [searchEnd, setSearchEnd] = useState(false);\r\n\tconst fetchUrl = `/search?query=${query}&type=${type}`;\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function getSearchResults(url, initialResults) {\r\n\t\t\tconst response = await localAPI.get(url);\r\n\t\t\tsetMovies([...initialResults, ...response.data.results]);\r\n\t\t\tsetLoaded(true);\r\n\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tgetSearchResults(fetchUrl, []);\r\n\t}, [fetchUrl]);\r\n\r\n\tconst fetchData = () => {\r\n\t\tlet url = fetchUrl + `&page=${page + 1}`;\r\n\t\tsetPage(page + 1);\r\n\r\n\t\tasync function getSearchResults(url, initialResults) {\r\n\t\t\tconst response = await localAPI.get(url);\r\n\t\t\tif (response.data.results.length == 0) {\r\n\t\t\t\tsetSearchEnd(true);\r\n\t\t\t}\r\n\t\t\tsetMovies([...initialResults, ...response.data.results]);\r\n\t\t\tsetLoaded(true);\r\n\r\n\t\t\treturn response;\r\n\t\t}\r\n\r\n\t\tgetSearchResults(url, movies);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"search_results\" id=\"search_results\">\r\n\t\t\t<InfiniteScroll\r\n\t\t\t\tdataLength={movies.length}\r\n\t\t\t\tnext={fetchData}\r\n\t\t\t\thasMore={!searchEnd}\r\n\t\t\t\tloader={<p>Loading....</p>}\r\n\t\t\t>\r\n\t\t\t\t{movies.map(\r\n\t\t\t\t\t(movie) =>\r\n\t\t\t\t\t\t(movie.media_type == \"movie\" ||\r\n\t\t\t\t\t\t\tmovie.media_type == \"tv\") &&\r\n\t\t\t\t\t\tmovie.poster_path != null &&\r\n\t\t\t\t\t\t(movie.media_type == \"movie\" ? (\r\n\t\t\t\t\t\t\t<Movie data={movie} id={movie.id} />\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<Series data={movie} id={movie.id} />\r\n\t\t\t\t\t\t))\r\n\t\t\t\t)}\r\n\t\t\t</InfiniteScroll>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchResults;\r\n"]},"metadata":{},"sourceType":"module"}