{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\risha\\\\Desktop\\\\ITLAB\\\\Netflix\\\\src\\\\components\\\\Episodes.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport functions from \"../utils/functions\";\nimport requests from \"../utils/requests\";\nimport Episode from \"./Episode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Episodes({\n  id,\n  data,\n  season_count\n}) {\n  _s();\n\n  let seasons = [];\n  const {\n    urls,\n    api\n  } = requests;\n  const [season, setSeason] = useState(1);\n  const [seasonInfo, setSeasonInfo] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    async function getSeasonInfo() {\n      let url = urls.seasonInfo;\n      url = url.replace(\"<TV_ID>\", id);\n      url = url.replace(\"<SEASON_NUMBER>\", season);\n      const response = await api.get(url);\n      setSeasonInfo(response.data);\n      setLoaded(true);\n    }\n\n    getSeasonInfo();\n  }, [season]);\n\n  for (let i = 1; i <= season_count; i++) seasons.push(i);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"dropdown\",\n      value: season,\n      onChange: e => setSeason(e.target.value),\n      children: seasons.map(x => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: x,\n        children: [\"Season \", x]\n      }, x, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"episodes\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this), loaded && seasonInfo.episodes.map(ep => functions.compareDates(new Date().getTime(), ep.air_date) && /*#__PURE__*/_jsxDEV(Episode, {\n        data: ep\n      }, ep.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Episodes, \"FrzmAsGFjgS2QkLFYd0YwAS8hKY=\");\n\n_c = Episodes;\nexport default Episodes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Episodes\");","map":{"version":3,"sources":["C:/Users/risha/Desktop/ITLAB/Netflix/src/components/Episodes.jsx"],"names":["React","useState","useEffect","functions","requests","Episode","Episodes","id","data","season_count","seasons","urls","api","season","setSeason","seasonInfo","setSeasonInfo","loaded","setLoaded","getSeasonInfo","url","replace","response","get","i","push","e","target","value","map","x","episodes","ep","compareDates","Date","getTime","air_date"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,IAAN;AAAYC,EAAAA;AAAZ,CAAlB,EAA8C;AAAA;;AAC7C,MAAIC,OAAO,GAAG,EAAd;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAgBR,QAAtB;AAEA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACf,mBAAeiB,aAAf,GAA+B;AAC9B,UAAIC,GAAG,GAAGT,IAAI,CAACI,UAAf;AACAK,MAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,SAAZ,EAAuBd,EAAvB,CAAN;AACAa,MAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,iBAAZ,EAA+BR,MAA/B,CAAN;AAEA,YAAMS,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQH,GAAR,CAAvB;AAEAJ,MAAAA,aAAa,CAACM,QAAQ,CAACd,IAAV,CAAb;AACAU,MAAAA,SAAS,CAAC,IAAD,CAAT;AACA;;AAEDC,IAAAA,aAAa;AACb,GAbQ,EAaN,CAACN,MAAD,CAbM,CAAT;;AAeA,OAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIf,YAArB,EAAmCe,CAAC,EAApC,EAAwCd,OAAO,CAACe,IAAR,CAAaD,CAAb;;AAExC,sBACC;AAAA,4BACC;AACC,MAAA,SAAS,EAAC,UADX;AAEC,MAAA,KAAK,EAAEX,MAFR;AAGC,MAAA,QAAQ,EAAGa,CAAD,IAAOZ,SAAS,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAH3B;AAAA,gBAKElB,OAAO,CAACmB,GAAR,CAAaC,CAAD,iBACZ;AAAQ,QAAA,KAAK,EAAEA,CAAf;AAAA,8BACSA,CADT;AAAA,SAAuBA,CAAvB;AAAA;AAAA;AAAA;AAAA,cADA;AALF;AAAA;AAAA;AAAA;AAAA,YADD,eAYC;AAAA;AAAA;AAAA;AAAA,YAZD,eAaC;AAAA;AAAA;AAAA;AAAA,YAbD,eAcC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA,cADD,EAEEb,MAAM,IACNF,UAAU,CAACgB,QAAX,CAAoBF,GAApB,CACEG,EAAD,IACC7B,SAAS,CAAC8B,YAAV,CACC,IAAIC,IAAJ,GAAWC,OAAX,EADD,EAECH,EAAE,CAACI,QAFJ,kBAGK,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEJ;AAAf,SAAwBA,EAAE,CAACzB,EAA3B;AAAA;AAAA;AAAA;AAAA,cALP,CAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAdD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA4BA;;GArDQD,Q;;KAAAA,Q;AAuDT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport functions from \"../utils/functions\";\r\nimport requests from \"../utils/requests\";\r\nimport Episode from \"./Episode\";\r\n\r\nfunction Episodes({ id, data, season_count }) {\r\n\tlet seasons = [];\r\n\tconst { urls, api } = requests;\r\n\r\n\tconst [season, setSeason] = useState(1);\r\n\tconst [seasonInfo, setSeasonInfo] = useState([]);\r\n\tconst [loaded, setLoaded] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function getSeasonInfo() {\r\n\t\t\tlet url = urls.seasonInfo;\r\n\t\t\turl = url.replace(\"<TV_ID>\", id);\r\n\t\t\turl = url.replace(\"<SEASON_NUMBER>\", season);\r\n\r\n\t\t\tconst response = await api.get(url);\r\n\r\n\t\t\tsetSeasonInfo(response.data);\r\n\t\t\tsetLoaded(true);\r\n\t\t}\r\n\r\n\t\tgetSeasonInfo();\r\n\t}, [season]);\r\n\r\n\tfor (let i = 1; i <= season_count; i++) seasons.push(i);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<select\r\n\t\t\t\tclassName=\"dropdown\"\r\n\t\t\t\tvalue={season}\r\n\t\t\t\tonChange={(e) => setSeason(e.target.value)}\r\n\t\t\t>\r\n\t\t\t\t{seasons.map((x) => (\r\n\t\t\t\t\t<option value={x} key={x}>\r\n\t\t\t\t\t\tSeason {x}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t</select>\r\n\t\t\t<br />\r\n\t\t\t<br />\r\n\t\t\t<div className=\"episodes\">\r\n\t\t\t\t<hr />\r\n\t\t\t\t{loaded &&\r\n\t\t\t\t\tseasonInfo.episodes.map(\r\n\t\t\t\t\t\t(ep) =>\r\n\t\t\t\t\t\t\tfunctions.compareDates(\r\n\t\t\t\t\t\t\t\tnew Date().getTime(),\r\n\t\t\t\t\t\t\t\tep.air_date\r\n\t\t\t\t\t\t\t) && <Episode data={ep} key={ep.id} />\r\n\t\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Episodes;\r\n"]},"metadata":{},"sourceType":"module"}